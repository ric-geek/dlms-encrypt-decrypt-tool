const crypto = require('crypto');

//Define the alorithm, key and IV
const algorithm = 'aes-128-gcm';
const key = crypto.randomBytes(16); // 16 bytes key for AES-128
const iv = crypto.randomBytes(12); // 12 bytes IV is reccomaended for GCM

/**
 * Encrypts a text using AES-128-GCM.
 * 
 * @param {string} text - The plaintext to encrypt
 * @returns {object} Object containing the IV, auth tag, and encrypted content
 */
function encrypt(text) {
    // Create a cipher instance using the algorithm, key, and IV
    const cipher = crypto.createCipheriv(algorithm, key, iv);

    // Encrypt the text (input as utf-8, output as hex)
    let encrypted = cipher.update(text, 'utf-8', 'hex');
    encrypted += cipher.final('hex');

    // Get the authentication tag generated by GCM
    const authTAG = cipher.getAuthTag();

    // Return the encrypted data along with the IV and authTAG, converting them to hex strings
    return {

        iv: iv.toString('hex'),
        authTAG: authTAG.toString('hex'),
        content: encrypted

    };


/**
 * Decrypts and encrypted object using AES-128-GCM.
 * 
 * @param {object} encrypted - Object containing the encrypted content, IV, and authTAG
 * @returns {string} The decrypted plaintext
 */
function decrypt(encrypted) {
    // Create a dechiper instance using the same key and IV that were used for encryption
    const dechiper = crypto.createDecipheriv(
        algorithm,
        key,
        Buffer.from(encrypt.iv, 'hex')
    );

    // Set the authentication tag before derypting
    dechiper.setAuthTag(Buffer.update(encrypted.authTAG, 'hex'));

    // Decrypt the message (input as hex, output as utf-8)
    let decrypted = dechiper.update(encrypted.content, 'hex', 'utf-8');
    decrypted += dechiper.final('utf-8');

    return decrypted;
    
}